{"ast":null,"code":"var _jsxFileName = \"/Users/ashutoshbisht/Desktop/Seller-App/client/src/Pages/DragAndDrop.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { read, utils } from \"xlsx\";\nimport { useDropzone } from \"react-dropzone\";\nimport \"./DragAndDrop.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExcelDragAndDrop() {\n  _s();\n  const [sheetData, setSheetData] = useState(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const handleDrop = acceptedFiles => {\n    // Handle file drop logic...\n  };\n  const handleDragEnter = () => {\n    setIsDragOver(true);\n  };\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: handleDrop,\n    onDragEnter: handleDragEnter,\n    onDragLeave: handleDragLeave\n  });\n  const dropAreaClassName = `drop-area${isDragOver ? \" drag-over\" : \"\"}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...getRootProps(),\n    className: dropAreaClassName,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag and drop an Excel file here, or click to select a file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), sheetData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preformatted-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Excel Sheet Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(sheetData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(ExcelDragAndDrop, \"WKX/9z/ukIePG++GFTPVXZQFplw=\", false, function () {\n  return [useDropzone];\n});\n_c = ExcelDragAndDrop;\nexport default ExcelDragAndDrop;\nvar _c;\n$RefreshReg$(_c, \"ExcelDragAndDrop\");","map":{"version":3,"names":["React","useState","read","utils","useDropzone","jsxDEV","_jsxDEV","ExcelDragAndDrop","_s","sheetData","setSheetData","isDragOver","setIsDragOver","handleDrop","acceptedFiles","handleDragEnter","handleDragLeave","getRootProps","getInputProps","onDrop","onDragEnter","onDragLeave","dropAreaClassName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/ashutoshbisht/Desktop/Seller-App/client/src/Pages/DragAndDrop.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { read, utils } from \"xlsx\";\nimport { useDropzone } from \"react-dropzone\";\nimport \"./DragAndDrop.css\";\n\nfunction ExcelDragAndDrop() {\n  const [sheetData, setSheetData] = useState(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const handleDrop = acceptedFiles => {\n    // Handle file drop logic...\n  };\n\n  const handleDragEnter = () => {\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: handleDrop,\n    onDragEnter: handleDragEnter,\n    onDragLeave: handleDragLeave,\n  });\n\n  const dropAreaClassName = `drop-area${isDragOver ? \" drag-over\" : \"\"}`;\n\n  return (\n    <div {...getRootProps()} className={dropAreaClassName}>\n      <input {...getInputProps()} />\n      <p>Drag and drop an Excel file here, or click to select a file</p>\n\n      {sheetData && (\n        <div className=\"preformatted-data\">\n          <h2>Excel Sheet Data:</h2>\n          <pre>{JSON.stringify(sheetData, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ExcelDragAndDrop;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,KAAK,QAAQ,MAAM;AAClC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMY,UAAU,GAAGC,aAAa,IAAI;IAClC;EAAA,CACD;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5BH,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMI,eAAe,GAAGA,CAAA,KAAM;IAC5BJ,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAM;IAAEK,YAAY;IAAEC;EAAc,CAAC,GAAGd,WAAW,CAAC;IAClDe,MAAM,EAAEN,UAAU;IAClBO,WAAW,EAAEL,eAAe;IAC5BM,WAAW,EAAEL;EACf,CAAC,CAAC;EAEF,MAAMM,iBAAiB,GAAI,YAAWX,UAAU,GAAG,YAAY,GAAG,EAAG,EAAC;EAEtE,oBACEL,OAAA;IAAA,GAASW,YAAY,CAAC,CAAC;IAAEM,SAAS,EAAED,iBAAkB;IAAAE,QAAA,gBACpDlB,OAAA;MAAA,GAAWY,aAAa,CAAC;IAAC;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC9BtB,OAAA;MAAAkB,QAAA,EAAG;IAA2D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAEjEnB,SAAS,iBACRH,OAAA;MAAKiB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChClB,OAAA;QAAAkB,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BtB,OAAA;QAAAkB,QAAA,EAAMK,IAAI,CAACC,SAAS,CAACrB,SAAS,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpB,EAAA,CArCQD,gBAAgB;EAAA,QAgBiBH,WAAW;AAAA;AAAA2B,EAAA,GAhB5CxB,gBAAgB;AAuCzB,eAAeA,gBAAgB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}