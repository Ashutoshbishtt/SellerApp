{"ast":null,"code":"export const STORE_ORDER_SUCCESS = \"STORE_ORDER_SUCCESS\";\nexport const STORE_ORDER_FAILURE = \"STORE_ORDER_FAILURE\";\nexport const GET_ORDER_SUCCESS = \"GET_ORDER_SUCCESS\";\nexport const GET_ORDER_FAILURE = \"GET_ORDER_FAILURE\";\nexport const GET_ALL_ORDERS_SUCCESS = \"GET_ALL_ORDERS_SUCCESS\";\nexport const GET_ALL_ORDERS_FAILURE = \"GET_ALL_ORDERS_FAILURE\";\nexport const UPDATE_ORDER_STATUS_SUCCESS = \"UPDATE_ORDER_STATUS_SUCCESS\";\nexport const UPDATE_ORDER_STATUS_FAILURE = \"UPDATE_ORDER_STATUS_FAILURE\";\nexport const storeOrder = orderPayload => async dispatch => {\n  try {\n    const response = await fetch(\"http://localhost:8080/storeOrder\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(orderPayload)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: STORE_ORDER_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: STORE_ORDER_FAILURE,\n        error: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: STORE_ORDER_FAILURE,\n      error: error.message\n    });\n  }\n};\nexport const getOrder = orderId => async dispatch => {\n  try {\n    const response = await fetch(`http://localhost:8080/getOrder?id=${orderId}`);\n    const data = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: GET_ORDER_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_ORDER_FAILURE,\n        error: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_ORDER_FAILURE,\n      error: error.message\n    });\n  }\n};\nexport const getAllOrders = params => async dispatch => {\n  try {\n    const queryParams = new URLSearchParams(params).toString();\n    const response = await fetch(`http://localhost:8080/getAllOrders?${queryParams}`);\n    const data = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: GET_ALL_ORDERS_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: GET_ALL_ORDERS_FAILURE,\n        error: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_ALL_ORDERS_FAILURE,\n      error: error.message\n    });\n  }\n};\nexport const updateOrderStatus = orderStatusPayload => async dispatch => {\n  try {\n    const response = await fetch(\"http://localhost:8080/updateOrderStatus\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(orderStatusPayload)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      dispatch({\n        type: UPDATE_ORDER_STATUS_SUCCESS,\n        payload: data\n      });\n    } else {\n      dispatch({\n        type: UPDATE_ORDER_STATUS_FAILURE,\n        error: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: UPDATE_ORDER_STATUS_FAILURE,\n      error: error.message\n    });\n  }\n};","map":{"version":3,"names":["STORE_ORDER_SUCCESS","STORE_ORDER_FAILURE","GET_ORDER_SUCCESS","GET_ORDER_FAILURE","GET_ALL_ORDERS_SUCCESS","GET_ALL_ORDERS_FAILURE","UPDATE_ORDER_STATUS_SUCCESS","UPDATE_ORDER_STATUS_FAILURE","storeOrder","orderPayload","dispatch","response","fetch","method","headers","body","JSON","stringify","data","json","ok","type","payload","error","message","getOrder","orderId","getAllOrders","params","queryParams","URLSearchParams","toString","updateOrderStatus","orderStatusPayload"],"sources":["/Users/ashutoshbisht/Desktop/Seller-App/client/src/Components/Redux/Action.js"],"sourcesContent":["export const STORE_ORDER_SUCCESS = \"STORE_ORDER_SUCCESS\";\nexport const STORE_ORDER_FAILURE = \"STORE_ORDER_FAILURE\";\nexport const GET_ORDER_SUCCESS = \"GET_ORDER_SUCCESS\";\nexport const GET_ORDER_FAILURE = \"GET_ORDER_FAILURE\";\nexport const GET_ALL_ORDERS_SUCCESS = \"GET_ALL_ORDERS_SUCCESS\";\nexport const GET_ALL_ORDERS_FAILURE = \"GET_ALL_ORDERS_FAILURE\";\nexport const UPDATE_ORDER_STATUS_SUCCESS = \"UPDATE_ORDER_STATUS_SUCCESS\";\nexport const UPDATE_ORDER_STATUS_FAILURE = \"UPDATE_ORDER_STATUS_FAILURE\";\n\nexport const storeOrder = orderPayload => async dispatch => {\n  try {\n    const response = await fetch(\"http://localhost:8080/storeOrder\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(orderPayload),\n    });\n    const data = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: STORE_ORDER_SUCCESS,\n        payload: data,\n      });\n    } else {\n      dispatch({\n        type: STORE_ORDER_FAILURE,\n        error: data,\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: STORE_ORDER_FAILURE,\n      error: error.message,\n    });\n  }\n};\n\nexport const getOrder = orderId => async dispatch => {\n  try {\n    const response = await fetch(\n      `http://localhost:8080/getOrder?id=${orderId}`\n    );\n    const data = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_ORDER_SUCCESS,\n        payload: data,\n      });\n    } else {\n      dispatch({\n        type: GET_ORDER_FAILURE,\n        error: data,\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_ORDER_FAILURE,\n      error: error.message,\n    });\n  }\n};\n\nexport const getAllOrders = params => async dispatch => {\n  try {\n    const queryParams = new URLSearchParams(params).toString();\n    const response = await fetch(\n      `http://localhost:8080/getAllOrders?${queryParams}`\n    );\n    const data = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: GET_ALL_ORDERS_SUCCESS,\n        payload: data,\n      });\n    } else {\n      dispatch({\n        type: GET_ALL_ORDERS_FAILURE,\n        error: data,\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_ALL_ORDERS_FAILURE,\n      error: error.message,\n    });\n  }\n};\n\nexport const updateOrderStatus = orderStatusPayload => async dispatch => {\n  try {\n    const response = await fetch(\"http://localhost:8080/updateOrderStatus\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(orderStatusPayload),\n    });\n    const data = await response.json();\n\n    if (response.ok) {\n      dispatch({\n        type: UPDATE_ORDER_STATUS_SUCCESS,\n        payload: data,\n      });\n    } else {\n      dispatch({\n        type: UPDATE_ORDER_STATUS_FAILURE,\n        error: data,\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: UPDATE_ORDER_STATUS_FAILURE,\n      error: error.message,\n    });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}